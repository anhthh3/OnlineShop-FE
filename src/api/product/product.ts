/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * Shoppe example
 * The shop API description
 * OpenAPI spec version: 1.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  ProductControllerCreateProduct200,
  ProductControllerGetAllProduct200,
  ProductControllerGetProductById200,
  ProductControllerGetProductPagination200,
  ProductControllerGetProductPaginationParams,
  ProductControllerRemoveProduct200,
  ProductControllerSearchProductByName200,
  ProductControllerSearchProductByNameParams,
  ProductControllerUpdateProductDetail200,
  ProductRequest
} from '.././model';




  export const getProduct = () => {
const productControllerCreateProduct = <TData = AxiosResponse<ProductControllerCreateProduct200>>(
    productRequest: ProductRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `http://localhost:3001/api/v1/product`,
      productRequest,options
    );
  }
const productControllerSearchProductByName = <TData = AxiosResponse<ProductControllerSearchProductByName200>>(
    params: ProductControllerSearchProductByNameParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:3001/api/v1/product/search`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
const productControllerGetProductPagination = <TData = AxiosResponse<ProductControllerGetProductPagination200>>(
    params: ProductControllerGetProductPaginationParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:3001/api/v1/product/paging`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }
const productControllerGetAllProduct = <TData = AxiosResponse<ProductControllerGetAllProduct200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:3001/api/v1/product/all`,options
    );
  }
const productControllerUpdateProductDetail = <TData = AxiosResponse<ProductControllerUpdateProductDetail200>>(
    id: number,
    productRequest: ProductRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.patch(
      `http://localhost:3001/api/v1/product/${id}`,
      productRequest,options
    );
  }
const productControllerRemoveProduct = <TData = AxiosResponse<ProductControllerRemoveProduct200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.delete(
      `http://localhost:3001/api/v1/product/${id}`,options
    );
  }
const productControllerGetProductById = <TData = AxiosResponse<ProductControllerGetProductById200>>(
    id: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `http://localhost:3001/api/v1/product/${id}`,options
    );
  }
return {productControllerCreateProduct,productControllerSearchProductByName,productControllerGetProductPagination,productControllerGetAllProduct,productControllerUpdateProductDetail,productControllerRemoveProduct,productControllerGetProductById}};
export type ProductControllerCreateProductResult = AxiosResponse<ProductControllerCreateProduct200>
export type ProductControllerSearchProductByNameResult = AxiosResponse<ProductControllerSearchProductByName200>
export type ProductControllerGetProductPaginationResult = AxiosResponse<ProductControllerGetProductPagination200>
export type ProductControllerGetAllProductResult = AxiosResponse<ProductControllerGetAllProduct200>
export type ProductControllerUpdateProductDetailResult = AxiosResponse<ProductControllerUpdateProductDetail200>
export type ProductControllerRemoveProductResult = AxiosResponse<ProductControllerRemoveProduct200>
export type ProductControllerGetProductByIdResult = AxiosResponse<ProductControllerGetProductById200>
