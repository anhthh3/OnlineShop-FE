/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Shoppe example
 * The shop API description
 * OpenAPI spec version: 1.0
 */
import type {
  ProductControllerCreateProduct200,
  ProductControllerGetAllProduct200,
  ProductControllerGetAllProductParams,
  ProductControllerGetProductById200,
  ProductControllerGetProductPagination200,
  ProductControllerGetProductPaginationParams,
  ProductControllerRemoveProduct200,
  ProductControllerSearchProductByName200,
  ProductControllerSearchProductByNameParams,
  ProductControllerUpdateProductDetail200,
  ProductRequest,
} from '../../models';

import { api } from '../../../../lib/api';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getProduct = () => {
  const productControllerCreateProduct = (
    productRequest: ProductRequest,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerCreateProduct200>(
      {
        url: `http://localhost:3001/api/v1/product`,
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        data: productRequest,
      },
      options,
    );
  };
  const productControllerSearchProductByName = (
    params: ProductControllerSearchProductByNameParams,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerSearchProductByName200>(
      {
        url: `http://localhost:3001/api/v1/product/search`,
        method: 'GET',
        params,
      },
      options,
    );
  };
  const productControllerGetProductPagination = (
    params: ProductControllerGetProductPaginationParams,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerGetProductPagination200>(
      {
        url: `http://localhost:3001/api/v1/product/paging`,
        method: 'GET',
        params,
      },
      options,
    );
  };
  const productControllerGetAllProduct = (
    params?: ProductControllerGetAllProductParams,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerGetAllProduct200>(
      {
        url: `http://localhost:3001/api/v1/product/all`,
        method: 'GET',
        params,
      },
      options,
    );
  };
  const productControllerUpdateProductDetail = (
    id: number,
    productRequest: ProductRequest,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerUpdateProductDetail200>(
      {
        url: `http://localhost:3001/api/v1/product/${id}`,
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        data: productRequest,
      },
      options,
    );
  };
  const productControllerRemoveProduct = (
    id: number,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerRemoveProduct200>(
      { url: `http://localhost:3001/api/v1/product/${id}`, method: 'DELETE' },
      options,
    );
  };
  const productControllerGetProductById = (
    id: number,
    options?: SecondParameter<typeof api>,
  ) => {
    return api<ProductControllerGetProductById200>(
      { url: `http://localhost:3001/api/v1/product/${id}`, method: 'GET' },
      options,
    );
  };
  return {
    productControllerCreateProduct,
    productControllerSearchProductByName,
    productControllerGetProductPagination,
    productControllerGetAllProduct,
    productControllerUpdateProductDetail,
    productControllerRemoveProduct,
    productControllerGetProductById,
  };
};
export type ProductControllerCreateProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getProduct>['productControllerCreateProduct']>
  >
>;
export type ProductControllerSearchProductByNameResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getProduct>['productControllerSearchProductByName']
    >
  >
>;
export type ProductControllerGetProductPaginationResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getProduct>['productControllerGetProductPagination']
    >
  >
>;
export type ProductControllerGetAllProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getProduct>['productControllerGetAllProduct']>
  >
>;
export type ProductControllerUpdateProductDetailResult = NonNullable<
  Awaited<
    ReturnType<
      ReturnType<typeof getProduct>['productControllerUpdateProductDetail']
    >
  >
>;
export type ProductControllerRemoveProductResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getProduct>['productControllerRemoveProduct']>
  >
>;
export type ProductControllerGetProductByIdResult = NonNullable<
  Awaited<
    ReturnType<ReturnType<typeof getProduct>['productControllerGetProductById']>
  >
>;
