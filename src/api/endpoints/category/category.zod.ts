/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Shoppe example
 * The shop API description
 * OpenAPI spec version: 1.0
 */
import { z as zod } from 'zod';

export const categoryControllerCreateBody = zod.object({
  name: zod.string(),
  description: zod.string(),
});

export const categoryControllerGetListQueryParams = zod.object({
  search: zod.string().optional(),
  sortBy: zod.string().optional(),
  order: zod.enum(['ASC', 'DESC']).optional(),
  page: zod.number().optional(),
  pageSize: zod.number().optional(),
});

export const categoryControllerGetListResponse = zod
  .object({
    success: zod.boolean(),
    statusCode: zod.number(),
    data: zod.object({}),
  })
  .and(
    zod.object({
      data: zod
        .object({
          result: zod.array(
            zod.object({
              id: zod.number(),
              name: zod.string(),
              description: zod.string(),
              deleted: zod.boolean(),
              createdAt: zod.string().datetime({}),
              updatedAt: zod.string().datetime({}),
            }),
          ),
          pagination: zod.object({
            totalPages: zod.number(),
            totalItems: zod.number(),
            currentPage: zod.number(),
            pageSize: zod.number(),
          }),
        })
        .optional(),
    }),
  );

export const categoryControllerGetAllResponse = zod
  .object({
    success: zod.boolean(),
    statusCode: zod.number(),
    data: zod.object({}),
  })
  .and(
    zod.object({
      data: zod
        .array(
          zod.object({
            id: zod.number(),
            name: zod.string(),
            description: zod.string(),
          }),
        )
        .optional(),
    }),
  );

export const categoryControllerFindOneParams = zod.object({
  id: zod.number(),
});

export const categoryControllerFindOneResponse = zod
  .object({
    success: zod.boolean(),
    statusCode: zod.number(),
    data: zod.object({}),
  })
  .and(
    zod.object({
      data: zod
        .object({
          id: zod.number(),
          name: zod.string(),
          description: zod.string(),
          deleted: zod.boolean(),
          createdAt: zod.string().datetime({}),
          updatedAt: zod.string().datetime({}),
        })
        .optional(),
    }),
  );

export const categoryControllerUpdateParams = zod.object({
  id: zod.number(),
});

export const categoryControllerUpdateBody = zod.object({
  name: zod.string().optional(),
  description: zod.string().optional(),
});

export const categoryControllerUpdateResponse = zod
  .object({
    success: zod.boolean(),
    statusCode: zod.number(),
    data: zod.object({}),
  })
  .and(
    zod.object({
      data: zod
        .object({
          id: zod.number(),
          name: zod.string(),
          description: zod.string(),
          deleted: zod.boolean(),
          createdAt: zod.string().datetime({}),
          updatedAt: zod.string().datetime({}),
        })
        .optional(),
    }),
  );

export const categoryControllerDeleteParams = zod.object({
  id: zod.number(),
});

export const categoryControllerDeleteResponse = zod
  .object({
    success: zod.boolean(),
    statusCode: zod.number(),
    data: zod.object({}),
  })
  .and(
    zod.object({
      data: zod.string().optional(),
    }),
  );
